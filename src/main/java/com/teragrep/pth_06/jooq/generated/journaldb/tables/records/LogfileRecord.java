/*
 * Teragrep Archive Datasource (pth_06)
 * Copyright (C) 2021-2024 Suomen Kanuuna Oy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 *
 * Additional permission under GNU Affero General Public License version 3
 * section 7
 *
 * If you modify this Program, or any covered work, by linking or combining it
 * with other code, such other code is not for that reason alone subject to any
 * of the requirements of the GNU Affero GPL version 3 as long as this Program
 * is the same Program as licensed from Suomen Kanuuna Oy without any additional
 * modifications.
 *
 * Supplemented terms under GNU Affero General Public License version 3
 * section 7
 *
 * Origin of the software must be attributed to Suomen Kanuuna Oy. Any modified
 * versions must be marked as "Modified version of" The Program.
 *
 * Names of the licensors and authors may not be used for publicity purposes.
 *
 * No rights are granted for use of trade names, trademarks, or service marks
 * which are in The Program if any.
 *
 * Licensee must indemnify licensors and authors for any liability that these
 * contractual assumptions impose on licensors and authors.
 *
 * To the extent this program is licensed as part of the Commercial versions of
 * Teragrep, the applicable Commercial License may apply to this file if you as
 * a licensee so wish it.
 */
package com.teragrep.pth_06.jooq.generated.journaldb.tables.records;

import com.teragrep.pth_06.jooq.generated.journaldb.tables.Logfile;

import java.sql.Date;
import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record16;
import org.jooq.Row16;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;
import org.jooq.types.UShort;

/**
 * Contains information for log files that have been run through Log Archiver
 */
@Generated(value = {
        "http://www.jooq.org", "jOOQ version:3.12.4"
},
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({
        "all", "unchecked", "rawtypes"
})
public class LogfileRecord extends UpdatableRecordImpl<LogfileRecord> implements
        Record16<ULong, Date, Date, UShort, String, String, UShort, String, Timestamp, ULong, String, String, String, UShort, UShort, ULong> {

    private static final long serialVersionUID = -757923771;

    /**
     * Setter for <code>journaldb.logfile.id</code>.
     */
    public void setId(ULong value) {
        set(0, value);
    }

    /**
     * Getter for <code>journaldb.logfile.id</code>.
     */
    public ULong getId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>journaldb.logfile.logdate</code>. Log file's date
     */
    public void setLogdate(Date value) {
        set(1, value);
    }

    /**
     * Getter for <code>journaldb.logfile.logdate</code>. Log file's date
     */
    public Date getLogdate() {
        return (Date) get(1);
    }

    /**
     * Setter for <code>journaldb.logfile.expiration</code>. Log file's expiration date
     */
    public void setExpiration(Date value) {
        set(2, value);
    }

    /**
     * Getter for <code>journaldb.logfile.expiration</code>. Log file's expiration date
     */
    public Date getExpiration() {
        return (Date) get(2);
    }

    /**
     * Setter for <code>journaldb.logfile.bucket_id</code>. Reference to bucket table
     */
    public void setBucketId(UShort value) {
        set(3, value);
    }

    /**
     * Getter for <code>journaldb.logfile.bucket_id</code>. Reference to bucket table
     */
    public UShort getBucketId() {
        return (UShort) get(3);
    }

    /**
     * Setter for <code>journaldb.logfile.path</code>. Log file's path in object storage
     */
    public void setPath(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>journaldb.logfile.path</code>. Log file's path in object storage
     */
    public String getPath() {
        return (String) get(4);
    }

    /**
     * Setter for <code>journaldb.logfile.object_key_hash</code>. Hash of path and bucket_id for uniqueness checks.
     * Known length: 64 characters (SHA-256)
     */
    public void setObjectKeyHash(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>journaldb.logfile.object_key_hash</code>. Hash of path and bucket_id for uniqueness checks.
     * Known length: 64 characters (SHA-256)
     */
    public String getObjectKeyHash() {
        return (String) get(5);
    }

    /**
     * Setter for <code>journaldb.logfile.host_id</code>. Reference to host table
     */
    public void setHostId(UShort value) {
        set(6, value);
    }

    /**
     * Getter for <code>journaldb.logfile.host_id</code>. Reference to host table
     */
    public UShort getHostId() {
        return (UShort) get(6);
    }

    /**
     * Setter for <code>journaldb.logfile.original_filename</code>. Log file's original file name
     */
    public void setOriginalFilename(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>journaldb.logfile.original_filename</code>. Log file's original file name
     */
    public String getOriginalFilename() {
        return (String) get(7);
    }

    /**
     * Setter for <code>journaldb.logfile.archived</code>. Date and time when the log file was archived
     */
    public void setArchived(Timestamp value) {
        set(8, value);
    }

    /**
     * Getter for <code>journaldb.logfile.archived</code>. Date and time when the log file was archived
     */
    public Timestamp getArchived() {
        return (Timestamp) get(8);
    }

    /**
     * Setter for <code>journaldb.logfile.file_size</code>. Log file's size in bytes
     */
    public void setFileSize(ULong value) {
        set(9, value);
    }

    /**
     * Getter for <code>journaldb.logfile.file_size</code>. Log file's size in bytes
     */
    public ULong getFileSize() {
        return (ULong) get(9);
    }

    /**
     * Setter for <code>journaldb.logfile.sha256_checksum</code>. An SHA256 hash of the log file (Note: known to be 44
     * characters long)
     */
    public void setSha256Checksum(String value) {
        set(10, value);
    }

    /**
     * Getter for <code>journaldb.logfile.sha256_checksum</code>. An SHA256 hash of the log file (Note: known to be 44
     * characters long)
     */
    public String getSha256Checksum() {
        return (String) get(10);
    }

    /**
     * Setter for <code>journaldb.logfile.archive_etag</code>. Object storage's MD5 hash of the log file (Note: room
     * left for possible implementation changes)
     */
    public void setArchiveEtag(String value) {
        set(11, value);
    }

    /**
     * Getter for <code>journaldb.logfile.archive_etag</code>. Object storage's MD5 hash of the log file (Note: room
     * left for possible implementation changes)
     */
    public String getArchiveEtag() {
        return (String) get(11);
    }

    /**
     * Setter for <code>journaldb.logfile.logtag</code>. A link back to CFEngine
     */
    public void setLogtag(String value) {
        set(12, value);
    }

    /**
     * Getter for <code>journaldb.logfile.logtag</code>. A link back to CFEngine
     */
    public String getLogtag() {
        return (String) get(12);
    }

    /**
     * Setter for <code>journaldb.logfile.source_system_id</code>. Log file's source system (references
     * source_system.id)
     */
    public void setSourceSystemId(UShort value) {
        set(13, value);
    }

    /**
     * Getter for <code>journaldb.logfile.source_system_id</code>. Log file's source system (references
     * source_system.id)
     */
    public UShort getSourceSystemId() {
        return (UShort) get(13);
    }

    /**
     * Setter for <code>journaldb.logfile.category_id</code>. Log file's category (references category.id)
     */
    public void setCategoryId(UShort value) {
        set(14, value);
    }

    /**
     * Getter for <code>journaldb.logfile.category_id</code>. Log file's category (references category.id)
     */
    public UShort getCategoryId() {
        return (UShort) get(14);
    }

    /**
     * Setter for <code>journaldb.logfile.uncompressed_file_size</code>. Log file's uncompressed file size
     */
    public void setUncompressedFileSize(ULong value) {
        set(15, value);
    }

    /**
     * Getter for <code>journaldb.logfile.uncompressed_file_size</code>. Log file's uncompressed file size
     */
    public ULong getUncompressedFileSize() {
        return (ULong) get(15);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record16 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row16<ULong, Date, Date, UShort, String, String, UShort, String, Timestamp, ULong, String, String, String, UShort, UShort, ULong> fieldsRow() {
        return (Row16) super.fieldsRow();
    }

    @Override
    public Row16<ULong, Date, Date, UShort, String, String, UShort, String, Timestamp, ULong, String, String, String, UShort, UShort, ULong> valuesRow() {
        return (Row16) super.valuesRow();
    }

    @Override
    public Field<ULong> field1() {
        return Logfile.LOGFILE.ID;
    }

    @Override
    public Field<Date> field2() {
        return Logfile.LOGFILE.LOGDATE;
    }

    @Override
    public Field<Date> field3() {
        return Logfile.LOGFILE.EXPIRATION;
    }

    @Override
    public Field<UShort> field4() {
        return Logfile.LOGFILE.BUCKET_ID;
    }

    @Override
    public Field<String> field5() {
        return Logfile.LOGFILE.PATH;
    }

    @Override
    public Field<String> field6() {
        return Logfile.LOGFILE.OBJECT_KEY_HASH;
    }

    @Override
    public Field<UShort> field7() {
        return Logfile.LOGFILE.HOST_ID;
    }

    @Override
    public Field<String> field8() {
        return Logfile.LOGFILE.ORIGINAL_FILENAME;
    }

    @Override
    public Field<Timestamp> field9() {
        return Logfile.LOGFILE.ARCHIVED;
    }

    @Override
    public Field<ULong> field10() {
        return Logfile.LOGFILE.FILE_SIZE;
    }

    @Override
    public Field<String> field11() {
        return Logfile.LOGFILE.SHA256_CHECKSUM;
    }

    @Override
    public Field<String> field12() {
        return Logfile.LOGFILE.ARCHIVE_ETAG;
    }

    @Override
    public Field<String> field13() {
        return Logfile.LOGFILE.LOGTAG;
    }

    @Override
    public Field<UShort> field14() {
        return Logfile.LOGFILE.SOURCE_SYSTEM_ID;
    }

    @Override
    public Field<UShort> field15() {
        return Logfile.LOGFILE.CATEGORY_ID;
    }

    @Override
    public Field<ULong> field16() {
        return Logfile.LOGFILE.UNCOMPRESSED_FILE_SIZE;
    }

    @Override
    public ULong component1() {
        return getId();
    }

    @Override
    public Date component2() {
        return getLogdate();
    }

    @Override
    public Date component3() {
        return getExpiration();
    }

    @Override
    public UShort component4() {
        return getBucketId();
    }

    @Override
    public String component5() {
        return getPath();
    }

    @Override
    public String component6() {
        return getObjectKeyHash();
    }

    @Override
    public UShort component7() {
        return getHostId();
    }

    @Override
    public String component8() {
        return getOriginalFilename();
    }

    @Override
    public Timestamp component9() {
        return getArchived();
    }

    @Override
    public ULong component10() {
        return getFileSize();
    }

    @Override
    public String component11() {
        return getSha256Checksum();
    }

    @Override
    public String component12() {
        return getArchiveEtag();
    }

    @Override
    public String component13() {
        return getLogtag();
    }

    @Override
    public UShort component14() {
        return getSourceSystemId();
    }

    @Override
    public UShort component15() {
        return getCategoryId();
    }

    @Override
    public ULong component16() {
        return getUncompressedFileSize();
    }

    @Override
    public ULong value1() {
        return getId();
    }

    @Override
    public Date value2() {
        return getLogdate();
    }

    @Override
    public Date value3() {
        return getExpiration();
    }

    @Override
    public UShort value4() {
        return getBucketId();
    }

    @Override
    public String value5() {
        return getPath();
    }

    @Override
    public String value6() {
        return getObjectKeyHash();
    }

    @Override
    public UShort value7() {
        return getHostId();
    }

    @Override
    public String value8() {
        return getOriginalFilename();
    }

    @Override
    public Timestamp value9() {
        return getArchived();
    }

    @Override
    public ULong value10() {
        return getFileSize();
    }

    @Override
    public String value11() {
        return getSha256Checksum();
    }

    @Override
    public String value12() {
        return getArchiveEtag();
    }

    @Override
    public String value13() {
        return getLogtag();
    }

    @Override
    public UShort value14() {
        return getSourceSystemId();
    }

    @Override
    public UShort value15() {
        return getCategoryId();
    }

    @Override
    public ULong value16() {
        return getUncompressedFileSize();
    }

    @Override
    public LogfileRecord value1(ULong value) {
        setId(value);
        return this;
    }

    @Override
    public LogfileRecord value2(Date value) {
        setLogdate(value);
        return this;
    }

    @Override
    public LogfileRecord value3(Date value) {
        setExpiration(value);
        return this;
    }

    @Override
    public LogfileRecord value4(UShort value) {
        setBucketId(value);
        return this;
    }

    @Override
    public LogfileRecord value5(String value) {
        setPath(value);
        return this;
    }

    @Override
    public LogfileRecord value6(String value) {
        setObjectKeyHash(value);
        return this;
    }

    @Override
    public LogfileRecord value7(UShort value) {
        setHostId(value);
        return this;
    }

    @Override
    public LogfileRecord value8(String value) {
        setOriginalFilename(value);
        return this;
    }

    @Override
    public LogfileRecord value9(Timestamp value) {
        setArchived(value);
        return this;
    }

    @Override
    public LogfileRecord value10(ULong value) {
        setFileSize(value);
        return this;
    }

    @Override
    public LogfileRecord value11(String value) {
        setSha256Checksum(value);
        return this;
    }

    @Override
    public LogfileRecord value12(String value) {
        setArchiveEtag(value);
        return this;
    }

    @Override
    public LogfileRecord value13(String value) {
        setLogtag(value);
        return this;
    }

    @Override
    public LogfileRecord value14(UShort value) {
        setSourceSystemId(value);
        return this;
    }

    @Override
    public LogfileRecord value15(UShort value) {
        setCategoryId(value);
        return this;
    }

    @Override
    public LogfileRecord value16(ULong value) {
        setUncompressedFileSize(value);
        return this;
    }

    @Override
    public LogfileRecord values(
            ULong value1,
            Date value2,
            Date value3,
            UShort value4,
            String value5,
            String value6,
            UShort value7,
            String value8,
            Timestamp value9,
            ULong value10,
            String value11,
            String value12,
            String value13,
            UShort value14,
            UShort value15,
            ULong value16
    ) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        value15(value15);
        value16(value16);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached LogfileRecord
     */
    public LogfileRecord() {
        super(Logfile.LOGFILE);
    }

    /**
     * Create a detached, initialised LogfileRecord
     */
    public LogfileRecord(
            ULong id,
            Date logdate,
            Date expiration,
            UShort bucketId,
            String path,
            String objectKeyHash,
            UShort hostId,
            String originalFilename,
            Timestamp archived,
            ULong fileSize,
            String sha256Checksum,
            String archiveEtag,
            String logtag,
            UShort sourceSystemId,
            UShort categoryId,
            ULong uncompressedFileSize
    ) {
        super(Logfile.LOGFILE);

        set(0, id);
        set(1, logdate);
        set(2, expiration);
        set(3, bucketId);
        set(4, path);
        set(5, objectKeyHash);
        set(6, hostId);
        set(7, originalFilename);
        set(8, archived);
        set(9, fileSize);
        set(10, sha256Checksum);
        set(11, archiveEtag);
        set(12, logtag);
        set(13, sourceSystemId);
        set(14, categoryId);
        set(15, uncompressedFileSize);
    }
}
