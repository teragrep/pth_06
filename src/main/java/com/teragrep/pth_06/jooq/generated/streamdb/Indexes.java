/*
 * Teragrep Archive Datasource (pth_06)
 * Copyright (C) 2021-2024 Suomen Kanuuna Oy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 *
 * Additional permission under GNU Affero General Public License version 3
 * section 7
 *
 * If you modify this Program, or any covered work, by linking or combining it
 * with other code, such other code is not for that reason alone subject to any
 * of the requirements of the GNU Affero GPL version 3 as long as this Program
 * is the same Program as licensed from Suomen Kanuuna Oy without any additional
 * modifications.
 *
 * Supplemented terms under GNU Affero General Public License version 3
 * section 7
 *
 * Origin of the software must be attributed to Suomen Kanuuna Oy. Any modified
 * versions must be marked as "Modified version of" The Program.
 *
 * Names of the licensors and authors may not be used for publicity purposes.
 *
 * No rights are granted for use of trade names, trademarks, or service marks
 * which are in The Program if any.
 *
 * Licensee must indemnify licensors and authors for any liability that these
 * contractual assumptions impose on licensors and authors.
 *
 * To the extent this program is licensed as part of the Commercial versions of
 * Teragrep, the applicable Commercial License may apply to this file if you as
 * a licensee so wish it.
 */
package com.teragrep.pth_06.jooq.generated.streamdb;

import com.teragrep.pth_06.jooq.generated.streamdb.tables.Host;
import com.teragrep.pth_06.jooq.generated.streamdb.tables.LogGroup;
import com.teragrep.pth_06.jooq.generated.streamdb.tables.Stream;

import javax.annotation.Generated;

import org.jooq.Index;
import org.jooq.OrderField;
import org.jooq.impl.Internal;

/**
 * A class modelling indexes of tables of the <code>streamdb</code> schema.
 */
@Generated(value = {
        "http://www.jooq.org", "jOOQ version:3.12.4"
},
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({
        "all", "unchecked", "rawtypes"
})
public class Indexes {

    // -------------------------------------------------------------------------
    // INDEX definitions
    // -------------------------------------------------------------------------

    public static final Index HOST_GID = Indexes0.HOST_GID;
    public static final Index HOST_IDX_NAME_ID = Indexes0.HOST_IDX_NAME_ID;
    public static final Index HOST_PRIMARY = Indexes0.HOST_PRIMARY;
    public static final Index LOG_GROUP_PRIMARY = Indexes0.LOG_GROUP_PRIMARY;
    public static final Index STREAM_GID = Indexes0.STREAM_GID;
    public static final Index STREAM_PRIMARY = Indexes0.STREAM_PRIMARY;

    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Indexes0 {

        public static Index HOST_GID = Internal.createIndex("gid", Host.HOST, new OrderField[] {
                Host.HOST.GID
        }, false);
        public static Index HOST_IDX_NAME_ID = Internal.createIndex("idx_name_id", Host.HOST, new OrderField[] {
                Host.HOST.NAME, Host.HOST.ID
        }, false);
        public static Index HOST_PRIMARY = Internal.createIndex("PRIMARY", Host.HOST, new OrderField[] {
                Host.HOST.ID
        }, true);
        public static Index LOG_GROUP_PRIMARY = Internal.createIndex("PRIMARY", LogGroup.LOG_GROUP, new OrderField[] {
                LogGroup.LOG_GROUP.ID
        }, true);
        public static Index STREAM_GID = Internal.createIndex("gid", Stream.STREAM, new OrderField[] {
                Stream.STREAM.GID
        }, false);
        public static Index STREAM_PRIMARY = Internal.createIndex("PRIMARY", Stream.STREAM, new OrderField[] {
                Stream.STREAM.ID
        }, true);
    }
}
